---
description: 
globs: 
alwaysApply: true
---
This custom N8N node enables video analysis using Google's Gemini AI in your n8n workflows. The node can process video files, apply AI analysis using various preset modes or custom prompts, and return structured data.

## Implementation Notes

1. **Video Processing**:
   - The node will handle URL-based videos.

2. **Analysis Modes**:
   - Matches the functionality available in the original Gemini app (./GEmini APP Src Code) of the custom prompt preset.
   - Each mode uses specialized prompts designed for specific types of analysis
   - Function calling is used to extract structured data.

3. **Output Format**:
   - Standardized JSON output with timecodes and analysis data
   - Supports both raw API response and structured formats
   - Includes confidence scores where relevant

4. **System Requirements**:
   - Node.js 18 or higher
   - Valid Google Gemini API key Must be passed using N8N Credentials system like all other nodes.


### Important N8N Documentation:

Standards:
To make your node available to the n8n community node repository, you must:

Make sure the package name starts with n8n-nodes- or @<scope>/n8n-nodes-. For example, n8n-nodes-weather or @weatherPlugins/n8n-nodes-weather.
Include n8n-community-node-package in your package keywords.
Make sure that you add your nodes and credentials to the package.json file inside the n8n attribute. Refer to the package.json in the starter node for an example.
Check your node using the linter and test it locally to ensure it works.
Submit the package to the npm registry. Refer to npm's documentation on Contributing packages to the registry for more information.

Creating nodes:
Learn how to build your own custom nodes.

This section includes:

Guidance on planning your build, including which style to use.
Tutorials for different node building styles.
Instructions for testing your node, including how to use the n8n node linter and troubleshooting support.
How to share your node with the community, or use it as a private node.
Reference material, including UI elements and information on the individual files that make up a node.
Prerequisites#
This section assumes the following:

Some familiarity with JavaScript and TypeScript.
Ability to manage your own development environment, including git.
Knowledge of npm, including creating and submitting packages.
Familiarity with n8n, including a good understanding of data structures and item linking.

---
Node types: Trigger and Action:
There are two node types you can build for n8n: trigger nodes and action nodes.

Both types provide integrations with external services.

Trigger nodes#
Trigger nodes start a workflow and supply the initial data. A workflow can contain multiple trigger nodes but with each execution, only one of them will execute, depending on the triggering event.

There are three types of trigger nodes in n8n:

Type	Description	Example Nodes
Webhook	Nodes for services that support webhooks. These nodes listen for events and trigger workflows in real time.	Zendesk Trigger, Telegram Trigger, Brevo Trigger
Polling	Nodes for services that don't support webhooks. These nodes periodically check for new data, triggering workflows when they detect updates.	Airtable Trigger, Gmail Trigger, Google Sheet Trigger, RssFeed Read Trigger
Others	Nodes that handle real-time responses not related to HTTP requests or polling. This includes message queue nodes and time-based triggers.	AMQP Trigger, RabbitMQ Trigger, MQTT Trigger, Schedule Trigger, Email Trigger (IMAP)
Action nodes#
Action nodes perform operations as part of your workflow. These can include manipulating data, and triggering events in other systems.

Choose your node building approach#
n8n has two node-building styles, declarative and programmatic.

You should use the declarative style for most nodes. This style:

Uses a JSON-based syntax, making it simpler to write, with less risk of introducing bugs.
Is more future-proof.
Supports integration with REST APIs.
The programmatic style is more verbose. You must use the programmatic style for:

Trigger nodes
Any node that isn't REST-based. This includes nodes that need to call a GraphQL API and nodes that use external dependencies.
Any node that needs to transform incoming data.
Full versioning. Refer to Node versioning for more information on types of versioning.
Data handling differences#
The main difference between the declarative and programmatic styles is how they handle incoming data and build API requests. The programmatic style requires an execute() method, which reads incoming data and parameters, then builds a request. The declarative style handles this using the routing key in the operations object. Refer to Node base file for more information on node parameters and the execute() method.

Syntax differences#
To understand the difference between the declarative and programmatic styles, compare the two code snippets below. This example creates a simplified version of the SendGrid integration, called "FriendGrid." The following code snippets aren't complete: they emphasize the differences in the node building styles.

In programmatic style:


import {
	IExecuteFunctions,
	INodeExecutionData,
	INodeType,
	INodeTypeDescription,
	IRequestOptions,
} from 'n8n-workflow';

// Create the FriendGrid class
export class FriendGrid implements INodeType {
  description: INodeTypeDescription = {
    displayName: 'FriendGrid',
    name: 'friendGrid',
    . . .
    properties: [
      {
        displayName: 'Resource',
        . . .
      },
      {
        displayName: 'Operation',
        name: 'operation',
        type: 'options',
        displayOptions: {
          show: {
              resource: [
              'contact',
              ],
          },
        },
        options: [
          {
            name: 'Create',
            value: 'create',
            description: 'Create a contact',
          },
        ],
        default: 'create',
        description: 'The operation to perform.',
      },
      {
        displayName: 'Email',
        name: 'email',
        . . .
      },
      {
        displayName: 'Additional Fields',
        // Sets up optional fields
      },
    ],
};

  async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
    let responseData;
    const resource = this.getNodeParameter('resource', 0) as string;
    const operation = this.getNodeParameter('operation', 0) as string;
    //Get credentials the user provided for this node
    const credentials = await this.getCredentials('friendGridApi') as IDataObject;

    if (resource === 'contact') {
      if (operation === 'create') {
      // Get email input
      const email = this.getNodeParameter('email', 0) as string;
      // Get additional fields input
      const additionalFields = this.getNodeParameter('additionalFields', 0) as IDataObject;
      const data: IDataObject = {
          email,
      };

      Object.assign(data, additionalFields);

      // Make HTTP request as defined in https://sendgrid.com/docs/api-reference/
      const options: IRequestOptions = {
        headers: {
            'Accept': 'application/json',
            'Authorization': `Bearer ${credentials.apiKey}`,
        },
        method: 'PUT',
        body: {
            contacts: [
            data,
            ],
        },
        url: `https://api.sendgrid.com/v3/marketing/contacts`,
        json: true,
      };
      responseData = await this.helpers.httpRequest(options);
      }
    }
    // Map data to n8n data
    return [this.helpers.returnJsonArray(responseData)];
  }
}
In declarative style:


import { INodeType, INodeTypeDescription } from 'n8n-workflow';

// Create the FriendGrid class
export class FriendGrid implements INodeType {
  description: INodeTypeDescription = {
    displayName: 'FriendGrid',
    name: 'friendGrid',
    . . .
    // Set up the basic request configuration
    requestDefaults: {
      baseURL: 'https://api.sendgrid.com/v3/marketing'
    },
    properties: [
      {
        displayName: 'Resource',
        . . .
      },
      {
        displayName: 'Operation',
        name: 'operation',
        type: 'options',
        displayOptions: {
          show: {
            resource: [
              'contact',
            ],
          },
        },
        options: [
          {
            name: 'Create',
            value: 'create',
            description: 'Create a contact',
            // Add the routing object
            routing: {
              request: {
                method: 'POST',
                url: '=/contacts',
                send: {
                  type: 'body',
                  properties: {
                    email: {{$parameter["email"]}}
                  }
                }
              }
            },
            // Handle the response to contact creation
            output: {
              postReceive: [
                {
                  type: 'set',
                  properties: {
                    value: '={{ { "success": $response } }}'
                  }
                }
              ]
            }
          },
        ],
        default: 'create',
        description: 'The operation to perform.',
      },
      {
        displayName: 'Email',
        . . .
      },
      {
        displayName: 'Additional Fields',
        // Sets up optional fields
      },
    ],
  }
  // No execute method needed
}
Design your node's user interface#
Most nodes are a GUI (graphical user interface) representation of an API. Designing the interface means finding a user-friendly way to represent API endpoints and parameters. Directly translating an entire API into form fields in a node may not result in a good user experience.

This document provides design guidance and standards to follow. These guidelines are the same as those used by n8n. This helps provide a smooth and consistent user experience for users mixing community and built-in nodes.

Design guidance#
All node's use n8n's node UI elements, so you don't need to consider style details such as colors, borders, and so on. However, it's still useful to go through a basic design process:

Review the documentation for the API you're integrating. Ask yourself:
What can you leave out?
What can you simplify?
Which parts of the API are confusing? How can you help users understand them?
Use a wireframe tool to try out your field layout. If you find your node has a lot of fields and is getting confusing, consider n8n's guidance on showing and hiding fields.
Standards#
UI text style#
Element	Style
Drop-down value	Title case
Hint	Sentence case
Info box	Sentence case. Don't use a period (.) for one-sentence information. Always use a period if there's more than one sentence. This field can include links, which should open in a new tab.
Node name	Title case
Parameter name	Title case
Subtitle	Title case
Tooltip	Sentence case. Don't use a period (.) for one-sentence tooltips. Always use a period if there's more than one sentence. This field can include links, which should open in a new tab.
UI text terminology#
Use the same terminology as the service the node connects to. For example, a Notion node should refer to Notion blocks, not Notion paragraphs, because Notion calls these elements blocks. There are exceptions to this rule, usually to avoid technical terms (for example, refer to the guidance on name and description for upsert operations).
Sometimes a service has different terms for something in its API and in its GUI. Use the GUI language in your node, as this is what most users are familiar with. If you think some users may need to refer to the service's API docs, consider including this information in a hint.
Don't use technical jargon when there are simpler alternatives.
Be consistent when naming things. For example, choose one of directory or folder then stick to it.
Node naming conventions#
Convention	Correct	Incorrect
If a node is a trigger node, 
the displayed name should have 'Trigger' at the end, 
with a space before.	Shopify Trigger	ShopifyTrigger, Shopify trigger
Don't include 'node' in the name.	Asana	Asana Node, Asana node
Showing and hiding fields#
Fields can either be:

Displayed when the node opens: use this for resources and operations, and required fields.
Hidden in the Optional fields section until a user clicks on that section: use this for optional fields.
Progressively disclose complexity: hide a field until any earlier fields it depends on have values. For example, if you have a Filter by date toggle, and a Date to filter by datepicker, don't display Date to filter by until the user enables Filter by date.

Conventions by field type#
Credentials#
n8n automatically displays credential fields as the top fields in the node.

Resources and operations#
APIs usually involve doing something to data. For example, "get all tasks." In this example, "task" is the resource, and "get all" is the operation.

When your node has this resource and operation pattern, your first field should be Resource, and your second field should be Operation.

Required fields#
Order fields by:

Most important to least important.
Scope: from broad to narrow. For example, you have fields for Document, Page, and Text to insert, put them in that order.
Optional fields#
Order fields alphabetically. To group similar things together, you can rename them. For example, rename Email and Secondary Email to Email (primary) and Email (secondary).
If an optional field has a default value that the node uses when the value isn't set, load the field with that value. Explain this in the field description. For example, Defaults to false.
Connected fields: if one optional fields is dependent on another, bundle them together. They should both be under a single option that shows both fields when selected.
If you have a lot of optional fields, consider grouping them by theme.
Help#
There are five types of help built in to the GUI:

Info boxes: yellow boxes that appear between fields. Refer to UI elements | Notice for more information.
Use info boxes for essential information. Don't over-use them. By making them rare, they stand out more and grab the user's attention.
Parameter hints: lines of text displayed beneath a user input field. Use this when there's something the user needs to know, but an info box would be excessive.
Node hints: provide help in the input panel, output panel, or node details view. Refer to UI elements | Hints for more information.
Tooltips: callouts that appear when the user hovers over the tooltip icon "Screenshot of the tooltip icon. The icon is a ? in a grey circle". Use tooltips for extra information that the user might need.
You don't have to provide a tooltip for every field. Only add one if it contains useful information.
When writing tooltips, think about what the user needs. Don't just copy-paste API parameter descriptions. If the description doesn't make sense, or has errors, improve it.
Placeholder text: n8n can display placeholder text in a field where the user hasn't entered a value. This can help the user know what's expected in that field.
Info boxes, hints, and tooltips can contain links to more information.

Errors#
Make it clear which fields are required.

Add validation rules to fields if possible. For example, check for valid email patterns if the field expects an email.

When displaying errors, make sure only the main error message displays in the red error title. More information should go in Details.

Toggles#
Tooltips for binary states should start with something like Whether to . . . .
You may need a list rather than a toggle:
Use toggles when it's clear what happens in a false state. For example, Simplify Output?. The alternative (don't simplify output) is clear.
Use a dropdown list with named options when you need more clarity. For example, Append?. What happens if you don't append is unclear (it could be that nothing happens, or information is overwritten, or discarded).
Lists#
Set default values for lists whenever possible. The default should be the most-used option.
Sort list options alphabetically.
You can include list option descriptions. Only add descriptions if they provide useful information.
If there is an option like All, use the word All, not shorthand like *.
Trigger node inputs#
When a trigger node has a parameter for specifying which events to trigger on:

Name the parameter Trigger on.
Don't include a tooltip.
Subtitles#
Set subtitles based on the values of the main parameters. For example:


subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
IDs#
When performing an operation on a specific record, such as "update a task comment" you need a way to specify which record you want to change.

Wherever possible, provide two ways to specify a record:
By choosing from a pre-populated list. You can generate this list using the loadOptions parameter. Refer to Base files for more information.
By entering an ID.
Name the field <Record name> name or ID. For example, Workspace Name or ID. Add a tooltip saying "Choose a name from the list, or specify an ID using an expression." Link to n8n's Expressions documentation.
Build your node so that it can handle users providing more information than required. For example:
If you need a relative path, handle the user pasting in the absolute path.
If the user needs to get an ID from a URL, handle the user pasting in the entire URL.
Dates and timestamps#
n8n uses ISO timestamp strings for dates and times. Make sure that any date or timestamp field you add supports all ISO 8601 formats.

JSON#
You should support two ways of specifying the content of a text input that expects JSON:

Typing JSON directly into the text input: you need to parse the resulting string into a JSON object.
Using an expression that returns JSON.
Node icons#
Common patterns and exceptions#
This section provides guidance on handling common design patterns, including some edge cases and exceptions to the main standards.

Simplify responses#
APIs can return a lot of data that isn't useful. Consider adding a toggle that allows users to choose to simplify the response data:

Name: Simplify Response
Description: Whether to return a simplified version of the response instead of the raw data
Upsert operations#
This should always be a separate operation with:

Name: Create or Update
Description: Create a new record, or update the current one if it already exists (upsert)
Boolean operators#
n8n doesn't have good support for combining boolean operators, such as AND and OR, in the GUI. Whenever possible, provide options for all ANDs or all ORs.

For example, you have a field called Must match to test if values match. Include options to test for Any and All, as separate options.

Source keys or binary properties#
Binary data is file data, such as spreadsheets or images. In n8n, you need a named key to reference the data. Don't use the terms "binary data" or "binary property" for this field. Instead, use a more descriptive name: Input data field name / Output data field name.

Node file structure#
Following best practices and standards in your node structure makes your node easier to maintain. It's helpful if other people need to work with the code.

The file and directory structure of your node depends on:

Your node's complexity.
Whether you use node versioning.
How many nodes you include in the npm package.
Required files and directories#
Your node must include:

A package.json file at the root of the project. This is required for any npm module.
A nodes directory, containing the code for your node:
This directory must contain the base file, in the format <node-name>.node.ts. For example, MyNode.node.ts.
n8n recommends including a codex file, containing metadata for your node. The codex filename must match the node base filename. For example, given a node base file named MyNode.node.ts, the codex name is MyNode.node.json.
The nodes directory can contain other files and subdirectories, including directories for versions, and node code split across more than one file to create a modular structure.
A credentials directory, containing your credentials code. This code lives in a single credentials file. The filename format is <node-name>.credentials.ts. For example, MyNode.credentials.ts.
Modular structure#
You can choose whether to place all your node's functionality in one file, or split it out into a base file and other modules, which the base file then imports. Unless your node is very simple, it's a best practice to split it out.

A basic pattern is to separate out operations. Refer to the HttpBin starter node for an example of this.

For more complex nodes, n8n recommends a directory structure. Refer to the Airtable node or Microsoft Outlook node as examples.

actions: a directory containing sub-directories that represent resources.
Each sub-directory should contain two types of files:
An index file with resource description (named either <resourceName>.resource.ts or index.ts)
Files for operations <operationName>.operation.ts. These files should have two exports: description of the operation and an execute function.
methods: an optional directory dynamic parameters' functions.
transport: a directory containing the communication implementation.
Versioning#
If your node has more than one version, and you're using full versioning, this makes the file structure more complex. You need a directory for each version, along with a base file that sets the default version. Refer to Node versioning for more information on working with versions, including types of versioning.

Decide how many nodes to include in a package#
There are two possible setups when building a node:

One node in one npm package.
More than one node in a single npm package.
n8n supports both approaches. If you include more than one node, each node should have its own directory in the nodes directory.

A best-practice example for programmatic nodes#
n8n's built-in Airtable node implements a modular structure and versioning, following recommended patterns.
